[{"path":"https://www.spsanderson.com/tidyaml/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Steven Sanderson. Author, maintainer. Steven Sanderson. Copyright holder.","code":""},{"path":"https://www.spsanderson.com/tidyaml/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sanderson S (2022). tidyaml: Automatic Machine Learning 'tidymodels'. R package version 0.0.0.9000, https://github.com/spsanderson/tidyaml.","code":"@Manual{,   title = {tidyaml: Automatic Machine Learning with `tidymodels`},   author = {Steven Sanderson},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://github.com/spsanderson/tidyaml}, }"},{"path":"https://www.spsanderson.com/tidyaml/index.html","id":"tidyaml","dir":"","previous_headings":"","what":"Automatic Machine Learning with `tidymodels`","title":"Automatic Machine Learning with `tidymodels`","text":"goal tidyaml …","code":""},{"path":"https://www.spsanderson.com/tidyaml/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Automatic Machine Learning with `tidymodels`","text":"can install development version tidyaml like :","code":"# FILL THIS IN! HOW CAN PEOPLE INSTALL YOUR DEV PACKAGE?"},{"path":"https://www.spsanderson.com/tidyaml/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Automatic Machine Learning with `tidymodels`","text":"basic example shows solve common problem: special using README.Rmd instead just README.md? can include R chunks like : ’ll still need render README.Rmd regularly, keep README.md --date. devtools::build_readme() handy . also use GitHub Actions re-render README.Rmd every time push. example workflow can found : https://github.com/r-lib/actions/tree/v1/examples. can also embed plots, example:  case, don’t forget commit push resulting figure files, display GitHub CRAN.","code":"library(tidyaml) ## basic example code summary(cars) #>      speed           dist        #>  Min.   : 4.0   Min.   :  2.00   #>  1st Qu.:12.0   1st Qu.: 26.00   #>  Median :15.0   Median : 36.00   #>  Mean   :15.4   Mean   : 42.98   #>  3rd Qu.:19.0   3rd Qu.: 56.00   #>  Max.   :25.0   Max.   :120.00"},{"path":"https://www.spsanderson.com/tidyaml/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Steven Paul Sanderson II, MPH Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://www.spsanderson.com/tidyaml/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://www.spsanderson.com/tidyaml/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://www.spsanderson.com/tidyaml/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://www.spsanderson.com/tidyaml/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://www.spsanderson.com/tidyaml/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"page lists tidy eval tools reexported package rlang. learn using tidy eval scripts packages high level, see dplyr programming vignette ggplot2 packages vignette. Metaprogramming section Advanced R may also useful deeper dive. tidy eval operators {{, !!, !!! syntactic constructs specially interpreted tidy eval functions. mostly need {{, !! !!! advanced operators use simple cases. curly-curly operator {{ allows tunnel data-variables passed function arguments inside tidy eval functions. {{ designed individual arguments. pass multiple arguments contained dots, use ... normal way.   enquo() enquos() delay execution one several function arguments. former returns single expression, latter returns list expressions. defused, expressions longer evaluate . must injected back evaluation context !! (single expression) !!! (list expressions).   simple case, code equivalent usage {{ ... . Defusing enquo() enquos() needed complex cases, instance need inspect modify expressions way. .data pronoun object represents current slice data. variable name string, use .data pronoun subset variable [[.   Another tidy eval operator :=. makes possible use glue curly-curly syntax LHS =. technical reasons, R language support complex expressions left =, use := workaround.   Many tidy eval functions like dplyr::mutate() dplyr::summarise() give automatic name unnamed inputs. need create sort automatic names , use as_label(). instance, glue-tunnelling syntax can reproduced manually :   Expressions defused enquo() (tunnelled {{) need simple column names, can arbitrarily complex. as_label() handles cases gracefully. code assumes simple column name, use as_name() instead. safer throws error input name expected.","code":"my_function <- function(data, var, ...) {    data %>%      group_by(...) %>%      summarise(mean = mean({{ var }}))  } my_function <- function(data, var, ...) {    # Defuse    var <- enquo(var)    dots <- enquos(...)      # Inject    data %>%      group_by(!!!dots) %>%      summarise(mean = mean(!!var))  } my_var <- \"disp\"  mtcars %>% summarise(mean = mean(.data[[my_var]])) my_function <- function(data, var, suffix = \"foo\") {    # Use `{{` to tunnel function arguments and the usual glue    # operator `{` to interpolate plain strings.    data %>%      summarise(\"{{ var }}_mean_{suffix}\" := mean({{ var }}))  } my_function <- function(data, var, suffix = \"foo\") {    var <- enquo(var)    prefix <- as_label(var)    data %>%      summarise(\"{prefix}_mean_{suffix}\" := mean(!!var))  }"},{"path":[]},{"path":"https://www.spsanderson.com/tidyaml/news/index.html","id":"new-features-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"New Features","title":"tidyaml 0.0.0.9000","text":"None","code":""},{"path":"https://www.spsanderson.com/tidyaml/news/index.html","id":"breaking-changes-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"tidyaml 0.0.0.9000","text":"None","code":""},{"path":"https://www.spsanderson.com/tidyaml/news/index.html","id":"minor-fixes-and-improvements-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"Minor Fixes and Improvements","title":"tidyaml 0.0.0.9000","text":"None Added NEWS.md file track changes package.","code":""}]
